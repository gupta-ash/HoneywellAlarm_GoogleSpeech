#!/usr/bin/env perl
#
# Script does 3 things:
# 1. Opens /var/spool/asterisk/alarm/HWAlarmStatus.sln file generated by Asterisk
# 2. Sends to Google Cloud Speech API to convert to text
# 3. Greps for ARM AWAY, STAY or DISARM in the text
# 4. Updates OpenHAB with the new status
# 5. Stores results in /var/log/LynxPanel/HWAlarmStatus.log
# 6. Emails results to email@email.com
#
# Base taken from: http://stackoverflow.com/questions/39627737/post-base64-encoded-file-to-google-speech-api-using-perl
# Render speech to text using the google cloud speech engine.
# Kruft Industries Sept. 2016
# Intended to replace work by the following(not sure where this is hosted): GNU General Public License Version 2 Copyright (C) 2011 - 2012, Lefteris Zafiris 
# <zaf.000@gmail.com>
# The script takes as input flac files at 8kHz and returns the following values: status : Return status. 0 means success, non zero values indicating different 
# errors.
# Outputs a voice transcription that satisfies the input of sendmailmp3 for freepbx authored by the above Zafiris I am by no means an expert with the perl 
# language, Please forgive any blaring ugliness :)

use strict;
use warnings; 
use JSON;
use utf8;
use MIME::Base64;
use LWP::UserAgent;
use Encode qw(encode);

sub decodeStatusFromSpeech {
   my $utterance = shift;

   my @words = ("away", "stay", "birthday","wednesday","disarm","ready to arm");
   my @meaning = qw(ARMAWAY ARMSTAY ARMSTAY ARMSTAY DISARM DISARM);

   for(my $index=0;$index<=$#words;$index++) {
     if ($utterance =~ /$words[$index]/i) {
       # print "$words[$index] : $meaning[$index] \n";
       return($meaning[$index]);
     }
   }
}

sub updateOpenHAB {
  my $status = shift;

  my $openhaburl = "http://192.168.1.1:8080/rest/items/HWAlarmStatusOutput";

  my $lwp = LWP::UserAgent->new;
  my $req = HTTP::Request->new( 'POST', $openhaburl );
  $req->header('Content-Type'=>'text/plain');
  $req->content($status);
  my $response = $lwp->request($req);
}

sub encode_base64url
{
   my($data) = @_;
   return 0 unless $data;
   $data = encode_base64($data);
   $data =~ s/\+/-/g;
   $data =~ s/\//_/g;
   $data =~ s/\=//g;
   $data =~ s/\n//g;
   return($data);
}


sub emailresponse {
   my $utterance = shift;
   my $confidence = shift;
   my $status = shift;
  
   #  my %resp = @_;

   my $to = 'ToEmail@Email.Com';
   my $from = 'FromEmail@Email.Com';
   my $subject = "CloudSpeech: HWAlarmStatus=$status / UTTER=$utterance";
   my $message = "CloudSpeech: HWAlarmStatus= STATUS=$status \n UTTERANCE=$utterance \n CONFIDENCE=$confidence \n";

   open(MAIL, "|/usr/sbin/sendmail -t");

   # Email Header
   print MAIL "To: $to\n";
   print MAIL "From: $from\n";
   print MAIL "Subject: $subject\n\n";

   # Email Body
   print MAIL $message;

   close(MAIL);
   # print "Email Sent Successfully\n";
}

sub speechtoText {
   my $url = "https://speech.googleapis.com/v1beta1/speech:syncrecognize?key=1234567890";

   my @file_list = @ARGV;
   foreach my $file (@file_list)
   {
      # print "Opening $file\n";
      open(my $fh, "<", "$file") or die "Cant read file: $!";
      my $audio = do
        { local $/; <$fh> };
      close($fh);

      my $flac = encode_base64url($audio);
      my $json = '{"config":{"encoding":"LINEAR16","sample_rate":8000,"language_code":"en-US"},"audio":{"content":"' . $flac . '"}}';

      my $req = HTTP::Request->new( 'POST', $url );
      $req->header( 'Content-Type' => 'application/json' );
      $req->content( $json );

      my $lwp = LWP::UserAgent->new;
      my $response = $lwp->request($req);

      # print $response->as_string; #debug output google's reply headers and message
      last if (!$response->is_success);

      # print $response->content; #debug output the full transcript
      my $doodle = $response->content;

      $doodle =~ s/.*\"transcript\"://g;
      $doodle =~ s/}\],.*//g;
      $doodle =~ s/^{\"result\":\[\]}/{\"result\":/g;
      $doodle =~ s/\R//g;
      $doodle =~ s/\*/_/g;

      my $jdata = decode_json($response->content);

      my %response = (
        utterance  => -1,
        confidence => -1,
      );
      $response{utterance} = encode('utf8', $jdata->{"results"}[0]->{"alternatives"}[0]->{"transcript"});
      $response{confidence} = $jdata->{"results"}[0]->{"alternatives"}[0]->{"confidence"};

      return(%response);
   }
}

sub saveStatus {
   my $utterance = shift;
   my $confidence = shift;
   my $status = shift;

   my $outfilename = '/home/common/HWAlarmStatus.txt';

   unlink($outfilename);
   open(my $outfile, '>', $outfilename) or die "Could not open file '$outfilename' $!";
   print $outfile "File created by /home/common/bin/gcloudspeech.pl\n";
   print $outfile "gcloudspeech.pl is called from extension_custom when STATUS.call file copied to /var/spool/asterisk/outgoing\n";
   print $outfile "STATUS.call copied by /home/common/bin/LynxControl.sh -STATUS\n";
   print $outfile "LynxControl.sh called from OpenHAB Thing:HWAlarmStatus defintion to report Lynx Status\n";
   print $outfile "==============================================================================================================\n";
   print $outfile "STATUS: $status \nUTTERANCE: $utterance \nCONFIDENCE: $confidence\n";
   close $outfile;
}

# main program starts here
   if (!@ARGV || $ARGV[0] eq '-h' || $ARGV[0] eq '--help') 
   {
      print "Speech recognition using google cloud speech api.\n\n";
      print "Usage: $0 [FILES]\n\n";
      exit;
   }

   my %response = speechtoText(@ARGV);
   print "Response: $response{utterance}\n";
   print "Confidence: $response{confidence}\n";

   my $status = decodeStatusFromSpeech($response{utterance});
   print "Status: $status\n";

   saveStatus($response{utterance}, $response{confidence}, $status);

   updateOpenHAB($status);
   emailresponse($response{utterance}, $response{confidence}, $status);

exit;
